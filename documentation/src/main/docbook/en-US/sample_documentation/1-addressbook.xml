<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2012. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
    <chapter xml:id="sample-addressbook">
        <title>Address Book</title>
        <sect1>
            <title>Introduction</title>
            <para>Every good framework needs a sample application. You want to have an application
                that demonstrates enough of the framework and is easy enough to understand. The
                Address book sample we have created is such an application. A very simple domain to
                understand with enough features to show things like the event mechanism, the
                commands and the separate data store and query database. </para>
            <para>The address book sample shows an Adobe flex user interface. The flex client makes
                the event handling interesting. The server side domain events are pushed to the flex
                clients to keep them up to date. </para>
            <para>So what does the sample provide? The sample contains contacts with addresses. Each
                contact can have a maximum of three addresses, one for each available type. Using
                the query database, you can request all contacts, request contact details and search
                the addresses. For this kind of queries, the query database is used. You can also
                create new contacts and addresses or provided updates.
            </para>
            <para>To interact with the application, you have to dispatch comamnds. The domain
                creates events for things like: contact created, contact updated, address changed.
                These events are picket up by special listeners that publish these events to all
                flex clients using BlazeDS. More on this part follows in section <xref
                    linkend="addressbook-flex-client"/>. </para>
            <para>The following image gives an overview of the architecture as discussed in this
                section.
            </para>
            <figure>
                <title>Architecture overview address book sample</title>
                <mediaobject>
                    <info>Architecture overview address book sample</info>
                    <imageobject role="fo">
                        <imagedata format="png" fileref="addressbook-arch-overview-hires.png"
                                   depth="10cm"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata format="png" fileref="addressbook-arch-overview.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>The next image gives a preview of the flex client.</para>
            <figure>
                <title>Preview of the flex client of the address book</title>
                <mediaobject>
                    <info>Preview of the flex client of the address book</info>
                    <imageobject role="fo">
                        <imagedata format="png" fileref="addressbook-sd-overview-hires.png"
                                   width="15cm"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata format="png" fileref="addressbook-sd-overview.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect1>
        <sect1 xml:id="addressbook-flex-client">
            <title>Flex client</title>
            <para>In this section we will describe the main components of the flex client. The flex
                client makes use of an Inversion Of Control framework called parsley. This framework
                makes the application maintainable and easier to understand. Parsley makes use of
                meta-data tags to indicate injection of objects and handling of messages. It makes
                heavily use of messages and events.
            </para>
            <note>
                <para>For the flex application we use the parsley framework. More information about
                    the framework can be found on the Parsley website: <uri>http://www.spicefactory.org/parsley/</uri>
                </para>
            </note>
            <para>The flex client talks to the server. Remote objects are used to ask data from the
                server and send data to the server. Another mechanism, called consumers, is used to
                receive update events. Both types of communication are handled by the BlazeDS
                framework. To make integration with the back-end even easier, the sample makes use of
                the spring blazeds integration project.
            </para>
            <para>The nice part about using flex on the client side is that flex enables you to
                receive the domain events and keep a local cache of the data. In the end, the flex
                client becomes a remote cache of the data on the server that makes use of the domain
                events to stay up to date. To receive the events, the application registers an event
                listener. The following code block shows the event listener .
            </para>
            <programlisting language="java">@Component
public class AddressListener {
    private final static Logger logger = LoggerFactory.getLogger(AddressListener.class);
    private UpdateMessageProducerForFlex producer;

    @EventHandler
    public void handleAddressCreatedEvent(AddressRegisteredEvent event) {
        AddressDTO addressDTO = AddressDTO.createFrom(
            event.getAddress(), event.getContactIdentifier(), event.getType());
        producer.sendAddressUpdate(addressDTO);
    }

    @EventHandler
    public void handleAddressRemovedEvent(AddressRemovedEvent event) {
        RemovedDTO removedDTO = RemovedDTO.createRemovedFrom(
            event.getContactIdentifier().toString(), event.getType());
        producer.sendRemovedUpdate(removedDTO);
    }

    @Autowired
    public void setProducer(UpdateMessageProducerForFlex producer) {
        this.producer = producer;
    }
}</programlisting>
            <para>This class registers two event listeners. The Axon Framework uses the EventHandler
                annotation and the argument of the method to register the right listener and to call
                this method when the event takes place. Both method create a DTO object and send
                this via the BlazeDS producer to all flex clients.
                <note>
                    <para>Since this is not a reference manual for flex or parsley you will not find
                        a detailed description of the flex client. If you want more information on
                        the flex client, refer to this blog item.
                        http://www.gridshore.nl/2010/02/25/creating-a-sample-for-axon-using-flex-and-parsley/ </para>
                </note>
            </para>
        </sect1>
        <sect1>
            <title>Application logic</title>
            <para>Axon is a framework. Axon makes it easier to create your own application following
                the Axon principles. This section discusses the components of the sample that make
                use of the Axon Framework and that form the back-end of your application.
            </para>
            <para>It all starts with the domain. The address book has a very easy domain, a root
                aggregate called Contact. The contact has a collection of addresses. The Address is
                an immutable value object. The most important business rule is that each address is
                of a certain type and a contact can only have one address of each type.
            </para>
            <para>Providing new or updated data to the application is done using commands and
                command handlers. The <code>CreateContactCommand</code> is used to create new
                contacts, the <code>UpdateContactCommand</code> to update existing and more commands
                to provide data for other tasks. All these commands are handled by the
                    <code>ContactCommandHandler</code>. The handler creates or updates the aggregate
                roots, in this case the<code>Contact</code>, and registers them with the repository.
                The aggregate root creates events like <code>ContactCreatedEvent</code>. These
                events are dispatched by the <code>ContactRepository</code> when storing the change
                has taken place. The following image gives you an idea what happens when a contact
                is created. </para>
            <figure>
                <title>Interaction between the different components</title>
                <mediaobject>
                    <info>Interaction between the different components</info>
                    <imageobject role="fo">
                        <imagedata format="png" fileref="addressbook-callstack-hires.png"
                                   width="8cm"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata format="png" fileref="addressbook-callstack.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>As you can see from the previous image, events are dispatched by the repository.
                The listener as discussed in section
                <xref linkend="addressbook-flex-client"/>
                listens for these events.
            </para>
            <para>Now that we have covered adding data by dispatching commands that are handled
                command handler class, the next part is about querying the data. The address book
                sample makes use of a separate data source for querying the data. Two databases
                configurations are available, mysql and hsqldb. The configuration is available in
                the file database-context.xml. By changing the following lines you can switch
                between an hsqldb or mysql. </para>
            <programlisting language="xml">
                &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                &lt;property name="locations" value="classpath:hsqldb.database.properties"/>
                &lt;/bean>
            </programlisting>
            <para>The sample makes use of jpa to keep the query datastore up te date. Events are
                received and handled by the<code>AddressTableUpdater</code>. The classes
                <code>ContactEntry</code>
                and
                <code>AddressEntry</code>
                represent the two
                entities as they are stored in the query datastore. The
                <code>ContactEntry</code>
                can be used to obtain a list of all available contacts. The
                <code>AddressEntry</code>
                can be used to query for addresses belonging to a
                contact and for addresses in a certain city.
            </para>
            <para>It is important to understand that this query datasource registers listeners, just
                like the flex client, to get updates about contact and address changes.
            </para>
        </sect1>
    </chapter>
